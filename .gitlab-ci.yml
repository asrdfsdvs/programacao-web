before_script:
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$SSH_PRIVATE_KEY")
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

# The job's name.
composer:

  # The job's stage (build, test or deploy).
  stage: build

  # What to run on the job.
  script:
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts
    - cp .env.example .env
    - php artisan key:generate
    - php artisan migrate
    - php artisan route:cache
    - php artisan config:cache

  artifacts:

    # (Optional) Give it an expiration date,
    # after that period you won't be able to
    # download them via the UI anymore.
    expire_in: 1 month

    # Define what to output from the job.
    paths:
      - vendor/
      - .env

  cache:

    # The variable CI_COMMIT_REF_SLUG
    # refers to the slug of the branch.
    # For example: `master` for the master branch.
    # We use the `composer` suffix to avoid conflicts with
    # the `npm` cache that we'll define next.
    key: ${CI_COMMIT_REF_SLUG}-composer

    # Define what to cache.
    paths:
      - vendor/

  only:
    - devel
    - master


npm:

  # Same stage as `composer` so that they run in parallel.
  stage: build

  # Cache the `node_modules` folder
  # using the `npm` suffix on the key.
  cache:
    key: ${CI_COMMIT_REF_SLUG}-npm
    paths:
      - frontend/node_modules/

  before_script:
    - cd frontend/

  # Install and compile.
  script:
    - npm install
    - npm run production

  # Provide the other jobs of the pipeline with
  # the node dependencies and the compiled assets.
  artifacts:
    expire_in: 1 month
    paths:
      - node_modules/
      - public/css/
      - public/js/

  only:
    - devel
    - master

phpunit:
  stage: test

  # List of jobs from which it will download the artifacts.
  dependencies:
    - composer

  script:
    - ls


#.init_ssh: &init_ssh |
#  eval $(ssh-agent -s)
#  echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
#  mkdir -p ~/.ssh
#  chmod 700 ~/.ssh
#  [[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.s


development:
  stage: deploy

  script:
#    - *init_ssh
    - php artisan deploy pweb.devel -s upload

  environment:
    name: staging
    url: http://pweb.devel

  only:
    - devel


#.init_ssh_prod: &init_ssh_prod |
#  eval $(ssh-agent -s)
#  echo "$SSH_PRIVATE_KEY_PROD" | tr -d '\r' | ssh-add - > /dev/null
#  mkdir -p ~/.ssh
#  chmod 700 ~/.ssh
#  [[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.s


production:
  stage: deploy

  script:
#    - *init_ssh_prod
    - php artisan deploy pweb.prod -s upload

  environment:
    name: staging
    url: http://pweb.prod

  only:
    - master
